// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_standard (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_V_TVALID,
        dst_V_TREADY,
        ap_ce,
        src_V_TDATA,
        src_V_TREADY,
        dst_V_TDATA,
        dst_V_TVALID,
        src_V_TDATA_blk_n,
        dst_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   src_V_TVALID;
input   dst_V_TREADY;
input   ap_ce;
input  [15:0] src_V_TDATA;
output   src_V_TREADY;
output  [63:0] dst_V_TDATA;
output   dst_V_TVALID;
output   src_V_TDATA_blk_n;
output   dst_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_TREADY;
reg dst_V_TVALID;
reg src_V_TDATA_blk_n;
reg dst_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] src_V_read_reg_225;
reg   [15:0] src_V_read_reg_225_pp0_iter1_reg;
reg   [15:0] src_V_read_reg_225_pp0_iter2_reg;
reg   [15:0] src_V_read_reg_225_pp0_iter3_reg;
reg   [15:0] src_V_read_reg_225_pp0_iter4_reg;
wire   [20:0] grp_fu_206_p2;
reg   [20:0] mul_ln1349_2_reg_254;
wire   [18:0] grp_fu_84_p2;
reg   [18:0] mul_ln1349_reg_259;
wire   [19:0] grp_fu_90_p2;
reg   [19:0] mul_ln1349_1_reg_265;
reg   [19:0] mul_ln1349_1_reg_265_pp0_iter5_reg;
wire   [21:0] zext_ln18_4_fu_99_p1;
reg   [21:0] zext_ln18_4_reg_271;
reg   [21:0] zext_ln18_4_reg_271_pp0_iter5_reg;
wire   [19:0] add_ln695_fu_126_p2;
reg   [19:0] add_ln695_reg_277;
reg   [19:0] add_ln695_reg_277_pp0_iter6_reg;
wire   [21:0] grp_fu_212_p3;
reg   [21:0] add_ln695_1_reg_282;
wire   [20:0] add_ln695_4_fu_132_p2;
reg   [20:0] add_ln695_4_reg_287;
wire   [18:0] add_ln695_6_fu_149_p2;
reg   [18:0] add_ln695_6_reg_292;
wire   [22:0] add_ln695_2_fu_161_p2;
reg   [22:0] add_ln695_2_reg_297;
wire   [21:0] add_ln695_7_fu_178_p2;
reg   [21:0] add_ln695_7_reg_302;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] grp_fu_84_p0;
wire   [3:0] grp_fu_84_p1;
wire   [15:0] grp_fu_90_p0;
wire   [4:0] grp_fu_90_p1;
wire   [17:0] shl_ln_fu_102_p3;
wire   [19:0] zext_ln18_1_fu_120_p1;
wire   [19:0] zext_ln17_1_fu_113_p1;
wire   [20:0] zext_ln18_fu_117_p1;
wire   [20:0] zext_ln18_2_fu_123_p1;
wire   [16:0] shl_ln1_fu_138_p3;
wire   [18:0] zext_ln17_fu_109_p1;
wire   [18:0] zext_ln695_7_fu_145_p1;
wire   [22:0] zext_ln18_3_fu_155_p1;
wire   [22:0] zext_ln695_5_fu_158_p1;
wire   [21:0] zext_ln695_6_fu_167_p1;
wire   [21:0] add_ln695_5_fu_170_p2;
wire   [21:0] zext_ln695_8_fu_175_p1;
wire   [22:0] zext_ln695_4_fu_184_p1;
wire   [22:0] add_ln695_3_fu_187_p2;
wire   [22:0] zext_ln695_9_fu_192_p1;
wire   [22:0] add_ln695_8_fu_195_p2;
wire   [15:0] grp_fu_206_p0;
wire   [5:0] grp_fu_206_p1;
wire   [15:0] grp_fu_212_p0;
wire   [6:0] grp_fu_212_p1;
wire   [20:0] grp_fu_212_p2;
reg    grp_fu_84_ce;
reg    grp_fu_90_ce;
reg    grp_fu_206_ce;
reg    grp_fu_212_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [20:0] grp_fu_206_p00;
wire   [21:0] grp_fu_212_p00;
wire   [21:0] grp_fu_212_p20;
wire   [18:0] grp_fu_84_p00;
wire   [19:0] grp_fu_90_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

top_mul_16ns_4ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 19 ))
mul_16ns_4ns_19_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_84_p0),
    .din1(grp_fu_84_p1),
    .ce(grp_fu_84_ce),
    .dout(grp_fu_84_p2)
);

top_mul_16ns_5ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 20 ))
mul_16ns_5ns_20_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_90_p0),
    .din1(grp_fu_90_p1),
    .ce(grp_fu_90_ce),
    .dout(grp_fu_90_p2)
);

top_mul_mul_16ns_6ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 21 ))
mul_mul_16ns_6ns_21_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(grp_fu_206_ce),
    .dout(grp_fu_206_p2)
);

top_mac_muladd_16ns_7ns_21ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 22 ))
mac_muladd_16ns_7ns_21ns_22_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p0),
    .din1(grp_fu_212_p1),
    .din2(grp_fu_212_p2),
    .ce(grp_fu_212_ce),
    .dout(grp_fu_212_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        add_ln695_1_reg_282 <= grp_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        add_ln695_2_reg_297 <= add_ln695_2_fu_161_p2;
        add_ln695_4_reg_287 <= add_ln695_4_fu_132_p2;
        add_ln695_6_reg_292[18 : 1] <= add_ln695_6_fu_149_p2[18 : 1];
        add_ln695_7_reg_302 <= add_ln695_7_fu_178_p2;
        add_ln695_reg_277 <= add_ln695_fu_126_p2;
        add_ln695_reg_277_pp0_iter6_reg <= add_ln695_reg_277;
        mul_ln1349_1_reg_265 <= grp_fu_90_p2;
        mul_ln1349_1_reg_265_pp0_iter5_reg <= mul_ln1349_1_reg_265;
        mul_ln1349_2_reg_254 <= grp_fu_206_p2;
        mul_ln1349_reg_259 <= grp_fu_84_p2;
        src_V_read_reg_225_pp0_iter2_reg <= src_V_read_reg_225_pp0_iter1_reg;
        src_V_read_reg_225_pp0_iter3_reg <= src_V_read_reg_225_pp0_iter2_reg;
        src_V_read_reg_225_pp0_iter4_reg <= src_V_read_reg_225_pp0_iter3_reg;
        zext_ln18_4_reg_271[20 : 0] <= zext_ln18_4_fu_99_p1[20 : 0];
        zext_ln18_4_reg_271_pp0_iter5_reg[20 : 0] <= zext_ln18_4_reg_271[20 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_read_reg_225 <= src_V_TDATA;
        src_V_read_reg_225_pp0_iter1_reg <= src_V_read_reg_225;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_V_TDATA_blk_n = dst_V_TREADY;
    end else begin
        dst_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        dst_V_TVALID = 1'b1;
    end else begin
        dst_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_206_ce = 1'b1;
    end else begin
        grp_fu_206_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_212_ce = 1'b1;
    end else begin
        grp_fu_212_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_84_ce = 1'b1;
    end else begin
        grp_fu_84_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_90_ce = 1'b1;
    end else begin
        grp_fu_90_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        src_V_TDATA_blk_n = src_V_TVALID;
    end else begin
        src_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        src_V_TREADY = 1'b1;
    end else begin
        src_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_2_fu_161_p2 = (zext_ln18_3_fu_155_p1 + zext_ln695_5_fu_158_p1);

assign add_ln695_3_fu_187_p2 = (zext_ln695_4_fu_184_p1 + add_ln695_2_reg_297);

assign add_ln695_4_fu_132_p2 = (zext_ln18_fu_117_p1 + zext_ln18_2_fu_123_p1);

assign add_ln695_5_fu_170_p2 = (zext_ln18_4_reg_271_pp0_iter5_reg + zext_ln695_6_fu_167_p1);

assign add_ln695_6_fu_149_p2 = (zext_ln17_fu_109_p1 + zext_ln695_7_fu_145_p1);

assign add_ln695_7_fu_178_p2 = (add_ln695_5_fu_170_p2 + zext_ln695_8_fu_175_p1);

assign add_ln695_8_fu_195_p2 = (add_ln695_3_fu_187_p2 + zext_ln695_9_fu_192_p1);

assign add_ln695_fu_126_p2 = (zext_ln18_1_fu_120_p1 + zext_ln17_1_fu_113_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (src_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((dst_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (src_V_TVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((dst_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (src_V_TVALID == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (src_V_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign dst_V_TDATA = add_ln695_8_fu_195_p2;

assign grp_fu_206_p0 = grp_fu_206_p00;

assign grp_fu_206_p00 = src_V_TDATA;

assign grp_fu_206_p1 = 21'd21;

assign grp_fu_212_p0 = grp_fu_212_p00;

assign grp_fu_212_p00 = src_V_read_reg_225_pp0_iter1_reg;

assign grp_fu_212_p1 = 22'd33;

assign grp_fu_212_p2 = grp_fu_212_p20;

assign grp_fu_212_p20 = mul_ln1349_2_reg_254;

assign grp_fu_84_p0 = grp_fu_84_p00;

assign grp_fu_84_p00 = src_V_read_reg_225;

assign grp_fu_84_p1 = 19'd7;

assign grp_fu_90_p0 = grp_fu_90_p00;

assign grp_fu_90_p00 = src_V_read_reg_225;

assign grp_fu_90_p1 = 20'd13;

assign shl_ln1_fu_138_p3 = {{src_V_read_reg_225_pp0_iter4_reg}, {1'd0}};

assign shl_ln_fu_102_p3 = {{src_V_read_reg_225_pp0_iter4_reg}, {2'd0}};

assign zext_ln17_1_fu_113_p1 = shl_ln_fu_102_p3;

assign zext_ln17_fu_109_p1 = shl_ln_fu_102_p3;

assign zext_ln18_1_fu_120_p1 = mul_ln1349_reg_259;

assign zext_ln18_2_fu_123_p1 = mul_ln1349_1_reg_265;

assign zext_ln18_3_fu_155_p1 = mul_ln1349_1_reg_265_pp0_iter5_reg;

assign zext_ln18_4_fu_99_p1 = mul_ln1349_2_reg_254;

assign zext_ln18_fu_117_p1 = mul_ln1349_reg_259;

assign zext_ln695_4_fu_184_p1 = add_ln695_reg_277_pp0_iter6_reg;

assign zext_ln695_5_fu_158_p1 = add_ln695_1_reg_282;

assign zext_ln695_6_fu_167_p1 = add_ln695_4_reg_287;

assign zext_ln695_7_fu_145_p1 = shl_ln1_fu_138_p3;

assign zext_ln695_8_fu_175_p1 = add_ln695_6_reg_292;

assign zext_ln695_9_fu_192_p1 = add_ln695_7_reg_302;

always @ (posedge ap_clk) begin
    zext_ln18_4_reg_271[21] <= 1'b0;
    zext_ln18_4_reg_271_pp0_iter5_reg[21] <= 1'b0;
    add_ln695_6_reg_292[0] <= 1'b0;
end

endmodule //top_standard
