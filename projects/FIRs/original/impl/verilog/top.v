// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=1.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.996000,HLS_SYN_LAT=19,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=478,HLS_SYN_LUT=454,HLS_VERSION=2020_1}" *)

module top (
        ap_clk,
        ap_rst_n,
        src_V_TDATA,
        src_V_TVALID,
        src_V_TREADY,
        dst_V_TDATA,
        dst_V_TVALID,
        dst_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] src_V_TDATA;
input   src_V_TVALID;
output   src_V_TREADY;
output  [63:0] dst_V_TDATA;
output   dst_V_TVALID;
input   dst_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    grp_standard_fu_57_src_V_TDATA_blk_n;
reg    src_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln26_reg_77;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln26_reg_77_pp0_iter7_reg;
wire    grp_standard_fu_57_dst_V_TDATA_blk_n;
reg    dst_V_TDATA_blk_n;
reg   [3:0] i_reg_46;
wire   [0:0] icmp_ln26_fu_65_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln26_reg_77_pp0_iter1_reg;
reg   [0:0] icmp_ln26_reg_77_pp0_iter2_reg;
reg   [0:0] icmp_ln26_reg_77_pp0_iter3_reg;
reg   [0:0] icmp_ln26_reg_77_pp0_iter4_reg;
reg   [0:0] icmp_ln26_reg_77_pp0_iter5_reg;
reg   [0:0] icmp_ln26_reg_77_pp0_iter6_reg;
wire   [3:0] i_1_fu_71_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire    grp_standard_fu_57_ap_start;
wire    grp_standard_fu_57_ap_done;
wire    grp_standard_fu_57_ap_idle;
wire    grp_standard_fu_57_ap_ready;
wire    grp_standard_fu_57_dst_V_TREADY;
reg    grp_standard_fu_57_ap_ce;
wire    grp_standard_fu_57_src_V_TREADY;
wire   [63:0] grp_standard_fu_57_dst_V_TDATA;
wire    grp_standard_fu_57_dst_V_TVALID;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call2;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call2;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call2;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call2;
wire    ap_block_state6_pp0_stage0_iter4_ignore_call2;
wire    ap_block_state7_pp0_stage0_iter5_ignore_call2;
wire    ap_block_state8_pp0_stage0_iter6_ignore_call2;
wire    ap_block_state9_pp0_stage0_iter7_ignore_call2;
wire    ap_block_state10_pp0_stage0_iter8_ignore_call2;
wire    ap_block_pp0_stage0_11001_ignoreCallOp25;
reg    grp_standard_fu_57_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    regslice_both_dst_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_src_V_U_apdone_blk;
wire   [15:0] src_V_TDATA_int_regslice;
wire    src_V_TVALID_int_regslice;
reg    src_V_TREADY_int_regslice;
wire    regslice_both_src_V_U_ack_in;
wire    dst_V_TREADY_int_regslice;
wire    regslice_both_dst_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 grp_standard_fu_57_ap_start_reg = 1'b0;
end

top_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

top_standard grp_standard_fu_57(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_standard_fu_57_ap_start),
    .ap_done(grp_standard_fu_57_ap_done),
    .ap_idle(grp_standard_fu_57_ap_idle),
    .ap_ready(grp_standard_fu_57_ap_ready),
    .src_V_TVALID(src_V_TVALID_int_regslice),
    .dst_V_TREADY(grp_standard_fu_57_dst_V_TREADY),
    .ap_ce(grp_standard_fu_57_ap_ce),
    .src_V_TDATA(src_V_TDATA_int_regslice),
    .src_V_TREADY(grp_standard_fu_57_src_V_TREADY),
    .dst_V_TDATA(grp_standard_fu_57_dst_V_TDATA),
    .dst_V_TVALID(grp_standard_fu_57_dst_V_TVALID),
    .src_V_TDATA_blk_n(grp_standard_fu_57_src_V_TDATA_blk_n),
    .dst_V_TDATA_blk_n(grp_standard_fu_57_dst_V_TDATA_blk_n)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_src_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_V_TDATA),
    .vld_in(src_V_TVALID),
    .ack_in(regslice_both_src_V_U_ack_in),
    .data_out(src_V_TDATA_int_regslice),
    .vld_out(src_V_TVALID_int_regslice),
    .ack_out(src_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_dst_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_standard_fu_57_dst_V_TDATA),
    .vld_in(grp_standard_fu_57_dst_V_TVALID),
    .ack_in(dst_V_TREADY_int_regslice),
    .data_out(dst_V_TDATA),
    .vld_out(regslice_both_dst_V_U_vld_out),
    .ack_out(dst_V_TREADY),
    .apdone_blk(regslice_both_dst_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_standard_fu_57_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_65_p2 == 1'd0))) begin
            grp_standard_fu_57_ap_start_reg <= 1'b1;
        end else if ((grp_standard_fu_57_ap_ready == 1'b1)) begin
            grp_standard_fu_57_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_65_p2 == 1'd0))) begin
        i_reg_46 <= i_1_fu_71_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_46 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_77 <= icmp_ln26_fu_65_p2;
        icmp_ln26_reg_77_pp0_iter1_reg <= icmp_ln26_reg_77;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln26_reg_77_pp0_iter2_reg <= icmp_ln26_reg_77_pp0_iter1_reg;
        icmp_ln26_reg_77_pp0_iter3_reg <= icmp_ln26_reg_77_pp0_iter2_reg;
        icmp_ln26_reg_77_pp0_iter4_reg <= icmp_ln26_reg_77_pp0_iter3_reg;
        icmp_ln26_reg_77_pp0_iter5_reg <= icmp_ln26_reg_77_pp0_iter4_reg;
        icmp_ln26_reg_77_pp0_iter6_reg <= icmp_ln26_reg_77_pp0_iter5_reg;
        icmp_ln26_reg_77_pp0_iter7_reg <= icmp_ln26_reg_77_pp0_iter6_reg;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_65_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_reg_77_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln26_reg_77 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_V_TDATA_blk_n = grp_standard_fu_57_dst_V_TDATA_blk_n;
    end else begin
        dst_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp25) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_standard_fu_57_ap_ce = 1'b1;
    end else begin
        grp_standard_fu_57_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_reg_77_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln26_reg_77 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        src_V_TDATA_blk_n = grp_standard_fu_57_src_V_TDATA_blk_n;
    end else begin
        src_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_77 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_TREADY_int_regslice = grp_standard_fu_57_src_V_TREADY;
    end else begin
        src_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_65_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_65_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln26_reg_77_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & ((grp_standard_fu_57_dst_V_TDATA_blk_n == 1'b0) | (grp_standard_fu_57_src_V_TDATA_blk_n == 1'b0))) | ((icmp_ln26_reg_77 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((grp_standard_fu_57_dst_V_TDATA_blk_n == 1'b0) | (grp_standard_fu_57_src_V_TDATA_blk_n == 1'b0))));
end

assign ap_block_pp0_stage0_11001_ignoreCallOp25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln26_reg_77_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & ((grp_standard_fu_57_dst_V_TDATA_blk_n == 1'b0) | (grp_standard_fu_57_src_V_TDATA_blk_n == 1'b0))) | ((icmp_ln26_reg_77 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((grp_standard_fu_57_dst_V_TDATA_blk_n == 1'b0) | (grp_standard_fu_57_src_V_TDATA_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((icmp_ln26_reg_77_pp0_iter7_reg == 1'd0) & ((grp_standard_fu_57_dst_V_TDATA_blk_n == 1'b0) | (grp_standard_fu_57_src_V_TDATA_blk_n == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter8_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln26_reg_77 == 1'd0) & ((grp_standard_fu_57_dst_V_TDATA_blk_n == 1'b0) | (grp_standard_fu_57_src_V_TDATA_blk_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7_ignore_call2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_V_TVALID = regslice_both_dst_V_U_vld_out;

assign grp_standard_fu_57_ap_start = grp_standard_fu_57_ap_start_reg;

assign grp_standard_fu_57_dst_V_TREADY = (dst_V_TREADY_int_regslice & ap_CS_fsm_pp0_stage0);

assign i_1_fu_71_p2 = (i_reg_46 + 4'd1);

assign icmp_ln26_fu_65_p2 = ((i_reg_46 == 4'd10) ? 1'b1 : 1'b0);

assign src_V_TREADY = regslice_both_src_V_U_ack_in;

endmodule //top
