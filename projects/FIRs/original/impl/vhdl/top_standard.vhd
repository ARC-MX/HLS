-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_standard is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_V_TVALID : IN STD_LOGIC;
    dst_V_TREADY : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    src_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    src_V_TREADY : OUT STD_LOGIC;
    dst_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    dst_V_TVALID : OUT STD_LOGIC;
    src_V_TDATA_blk_n : OUT STD_LOGIC;
    dst_V_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of top_standard is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv19_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000111";
    constant ap_const_lv20_D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv21_15 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010101";
    constant ap_const_lv22_21 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal src_V_read_reg_225 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_V_read_reg_225_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal src_V_read_reg_225_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal src_V_read_reg_225_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal src_V_read_reg_225_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1349_2_reg_254 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1349_reg_259 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1349_1_reg_265 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1349_1_reg_265_pp0_iter5_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln18_4_fu_99_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln18_4_reg_271 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln18_4_reg_271_pp0_iter5_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln695_fu_126_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln695_reg_277 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln695_reg_277_pp0_iter6_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_212_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln695_1_reg_282 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln695_4_fu_132_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln695_4_reg_287 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln695_6_fu_149_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln695_6_reg_292 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln695_2_fu_161_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln695_2_reg_297 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln695_7_fu_178_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln695_7_reg_302 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_84_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_84_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_90_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_90_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_102_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln18_1_fu_120_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln17_1_fu_113_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln18_fu_117_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln18_2_fu_123_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1_fu_138_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln17_fu_109_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln695_7_fu_145_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln18_3_fu_155_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln695_5_fu_158_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln695_6_fu_167_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln695_5_fu_170_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln695_8_fu_175_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln695_4_fu_184_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln695_3_fu_187_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln695_9_fu_192_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln695_8_fu_195_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_212_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_84_ce : STD_LOGIC;
    signal grp_fu_90_ce : STD_LOGIC;
    signal grp_fu_206_ce : STD_LOGIC;
    signal grp_fu_212_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_206_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_212_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_212_p20 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_84_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_90_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component top_mul_16ns_4ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component top_mul_16ns_5ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component top_mul_mul_16ns_6ns_21_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component top_mac_muladd_16ns_7ns_21ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    mul_16ns_4ns_19_4_1_U1 : component top_mul_16ns_4ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_84_p0,
        din1 => grp_fu_84_p1,
        ce => grp_fu_84_ce,
        dout => grp_fu_84_p2);

    mul_16ns_5ns_20_4_1_U2 : component top_mul_16ns_5ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_90_p0,
        din1 => grp_fu_90_p1,
        ce => grp_fu_90_ce,
        dout => grp_fu_90_p2);

    mul_mul_16ns_6ns_21_4_1_U3 : component top_mul_mul_16ns_6ns_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p2);

    mac_muladd_16ns_7ns_21ns_22_4_1_U4 : component top_mac_muladd_16ns_7ns_21ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 21,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_212_p0,
        din1 => grp_fu_212_p1,
        din2 => grp_fu_212_p2,
        ce => grp_fu_212_ce,
        dout => grp_fu_212_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln695_1_reg_282 <= grp_fu_212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln695_2_reg_297 <= add_ln695_2_fu_161_p2;
                add_ln695_4_reg_287 <= add_ln695_4_fu_132_p2;
                    add_ln695_6_reg_292(18 downto 1) <= add_ln695_6_fu_149_p2(18 downto 1);
                add_ln695_7_reg_302 <= add_ln695_7_fu_178_p2;
                add_ln695_reg_277 <= add_ln695_fu_126_p2;
                add_ln695_reg_277_pp0_iter6_reg <= add_ln695_reg_277;
                mul_ln1349_1_reg_265 <= grp_fu_90_p2;
                mul_ln1349_1_reg_265_pp0_iter5_reg <= mul_ln1349_1_reg_265;
                mul_ln1349_2_reg_254 <= grp_fu_206_p2;
                mul_ln1349_reg_259 <= grp_fu_84_p2;
                src_V_read_reg_225_pp0_iter2_reg <= src_V_read_reg_225_pp0_iter1_reg;
                src_V_read_reg_225_pp0_iter3_reg <= src_V_read_reg_225_pp0_iter2_reg;
                src_V_read_reg_225_pp0_iter4_reg <= src_V_read_reg_225_pp0_iter3_reg;
                    zext_ln18_4_reg_271(20 downto 0) <= zext_ln18_4_fu_99_p1(20 downto 0);
                    zext_ln18_4_reg_271_pp0_iter5_reg(20 downto 0) <= zext_ln18_4_reg_271(20 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                src_V_read_reg_225 <= src_V_TDATA;
                src_V_read_reg_225_pp0_iter1_reg <= src_V_read_reg_225;
            end if;
        end if;
    end process;
    zext_ln18_4_reg_271(21) <= '0';
    zext_ln18_4_reg_271_pp0_iter5_reg(21) <= '0';
    add_ln695_6_reg_292(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln695_2_fu_161_p2 <= std_logic_vector(unsigned(zext_ln18_3_fu_155_p1) + unsigned(zext_ln695_5_fu_158_p1));
    add_ln695_3_fu_187_p2 <= std_logic_vector(unsigned(zext_ln695_4_fu_184_p1) + unsigned(add_ln695_2_reg_297));
    add_ln695_4_fu_132_p2 <= std_logic_vector(unsigned(zext_ln18_fu_117_p1) + unsigned(zext_ln18_2_fu_123_p1));
    add_ln695_5_fu_170_p2 <= std_logic_vector(unsigned(zext_ln18_4_reg_271_pp0_iter5_reg) + unsigned(zext_ln695_6_fu_167_p1));
    add_ln695_6_fu_149_p2 <= std_logic_vector(unsigned(zext_ln17_fu_109_p1) + unsigned(zext_ln695_7_fu_145_p1));
    add_ln695_7_fu_178_p2 <= std_logic_vector(unsigned(add_ln695_5_fu_170_p2) + unsigned(zext_ln695_8_fu_175_p1));
    add_ln695_8_fu_195_p2 <= std_logic_vector(unsigned(add_ln695_3_fu_187_p2) + unsigned(zext_ln695_9_fu_192_p1));
    add_ln695_fu_126_p2 <= std_logic_vector(unsigned(zext_ln18_1_fu_120_p1) + unsigned(zext_ln17_1_fu_113_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, src_V_TVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (src_V_TVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, src_V_TVALID, dst_V_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((dst_V_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (src_V_TVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, src_V_TVALID, dst_V_TREADY, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((dst_V_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (src_V_TVALID = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, src_V_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (src_V_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_8_fu_195_p2),64));

    dst_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, dst_V_TREADY)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_V_TDATA_blk_n <= dst_V_TREADY;
        else 
            dst_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            dst_V_TVALID <= ap_const_logic_1;
        else 
            dst_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_206_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_206_ce <= ap_const_logic_1;
        else 
            grp_fu_206_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_206_p0 <= grp_fu_206_p00(16 - 1 downto 0);
    grp_fu_206_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_TDATA),21));
    grp_fu_206_p1 <= ap_const_lv21_15(6 - 1 downto 0);

    grp_fu_212_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_212_ce <= ap_const_logic_1;
        else 
            grp_fu_212_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_212_p0 <= grp_fu_212_p00(16 - 1 downto 0);
    grp_fu_212_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_read_reg_225_pp0_iter1_reg),22));
    grp_fu_212_p1 <= ap_const_lv22_21(7 - 1 downto 0);
    grp_fu_212_p2 <= grp_fu_212_p20(21 - 1 downto 0);
    grp_fu_212_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_2_reg_254),22));

    grp_fu_84_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_84_ce <= ap_const_logic_1;
        else 
            grp_fu_84_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_84_p0 <= grp_fu_84_p00(16 - 1 downto 0);
    grp_fu_84_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_read_reg_225),19));
    grp_fu_84_p1 <= ap_const_lv19_7(4 - 1 downto 0);

    grp_fu_90_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_90_ce <= ap_const_logic_1;
        else 
            grp_fu_90_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_90_p0 <= grp_fu_90_p00(16 - 1 downto 0);
    grp_fu_90_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_read_reg_225),20));
    grp_fu_90_p1 <= ap_const_lv20_D(5 - 1 downto 0);
    shl_ln1_fu_138_p3 <= (src_V_read_reg_225_pp0_iter4_reg & ap_const_lv1_0);
    shl_ln_fu_102_p3 <= (src_V_read_reg_225_pp0_iter4_reg & ap_const_lv2_0);

    src_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, src_V_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            src_V_TDATA_blk_n <= src_V_TVALID;
        else 
            src_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            src_V_TREADY <= ap_const_logic_1;
        else 
            src_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln17_1_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_102_p3),20));
    zext_ln17_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_102_p3),19));
    zext_ln18_1_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_reg_259),20));
    zext_ln18_2_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_1_reg_265),21));
    zext_ln18_3_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_1_reg_265_pp0_iter5_reg),23));
    zext_ln18_4_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_2_reg_254),22));
    zext_ln18_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_reg_259),21));
    zext_ln695_4_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_reg_277_pp0_iter6_reg),23));
    zext_ln695_5_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_1_reg_282),23));
    zext_ln695_6_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_4_reg_287),22));
    zext_ln695_7_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_138_p3),19));
    zext_ln695_8_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_6_reg_292),22));
    zext_ln695_9_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_7_reg_302),23));
end behav;
