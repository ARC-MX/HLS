// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_buf2stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_0_address0,
        buffer_0_ce0,
        buffer_0_q0,
        buffer_1_address0,
        buffer_1_ce0,
        buffer_1_q0,
        buffer_2_address0,
        buffer_2_ce0,
        buffer_2_q0,
        buffer_3_address0,
        buffer_3_ce0,
        buffer_3_q0,
        buffer_4_address0,
        buffer_4_ce0,
        buffer_4_q0,
        buffer_5_address0,
        buffer_5_ce0,
        buffer_5_q0,
        buffer_6_address0,
        buffer_6_ce0,
        buffer_6_q0,
        buffer_7_address0,
        buffer_7_ce0,
        buffer_7_q0,
        buffer_8_address0,
        buffer_8_ce0,
        buffer_8_q0,
        buffer_9_address0,
        buffer_9_ce0,
        buffer_9_q0,
        dst_V_din,
        dst_V_full_n,
        dst_V_write,
        dst_1_V_din,
        dst_1_V_full_n,
        dst_1_V_write,
        dst_2_V_din,
        dst_2_V_full_n,
        dst_2_V_write,
        dst_3_V_din,
        dst_3_V_full_n,
        dst_3_V_write,
        dst_4_V_din,
        dst_4_V_full_n,
        dst_4_V_write,
        enable
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buffer_0_address0;
output   buffer_0_ce0;
input  [31:0] buffer_0_q0;
output  [3:0] buffer_1_address0;
output   buffer_1_ce0;
input  [31:0] buffer_1_q0;
output  [3:0] buffer_2_address0;
output   buffer_2_ce0;
input  [31:0] buffer_2_q0;
output  [3:0] buffer_3_address0;
output   buffer_3_ce0;
input  [31:0] buffer_3_q0;
output  [3:0] buffer_4_address0;
output   buffer_4_ce0;
input  [31:0] buffer_4_q0;
output  [3:0] buffer_5_address0;
output   buffer_5_ce0;
input  [31:0] buffer_5_q0;
output  [3:0] buffer_6_address0;
output   buffer_6_ce0;
input  [31:0] buffer_6_q0;
output  [3:0] buffer_7_address0;
output   buffer_7_ce0;
input  [31:0] buffer_7_q0;
output  [3:0] buffer_8_address0;
output   buffer_8_ce0;
input  [31:0] buffer_8_q0;
output  [3:0] buffer_9_address0;
output   buffer_9_ce0;
input  [31:0] buffer_9_q0;
output  [31:0] dst_V_din;
input   dst_V_full_n;
output   dst_V_write;
output  [31:0] dst_1_V_din;
input   dst_1_V_full_n;
output   dst_1_V_write;
output  [31:0] dst_2_V_din;
input   dst_2_V_full_n;
output   dst_2_V_write;
output  [31:0] dst_3_V_din;
input   dst_3_V_full_n;
output   dst_3_V_write;
output  [31:0] dst_4_V_din;
input   dst_4_V_full_n;
output   dst_4_V_write;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_0_ce0;
reg buffer_1_ce0;
reg buffer_2_ce0;
reg buffer_3_ce0;
reg buffer_4_ce0;
reg buffer_5_ce0;
reg buffer_6_ce0;
reg buffer_7_ce0;
reg buffer_8_ce0;
reg buffer_9_ce0;
reg dst_V_write;
reg dst_1_V_write;
reg dst_2_V_write;
reg dst_3_V_write;
reg dst_4_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln13_reg_360;
reg    dst_1_V_blk_n;
reg    dst_2_V_blk_n;
reg    dst_3_V_blk_n;
reg    dst_4_V_blk_n;
reg   [4:0] i_reg_245;
wire   [0:0] enable_read_read_fu_74_p2;
wire   [0:0] icmp_ln13_fu_316_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_1_fu_322_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] empty_40_fu_352_p1;
reg   [0:0] empty_40_reg_369;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] ap_phi_mux_phi_ln167_phi_fu_259_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_phi_ln167_reg_256;
reg   [31:0] ap_phi_mux_phi_ln167_1_phi_fu_271_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268;
reg   [31:0] ap_phi_mux_phi_ln167_2_phi_fu_283_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280;
reg   [31:0] ap_phi_mux_phi_ln167_3_phi_fu_295_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292;
reg   [31:0] ap_phi_mux_phi_ln167_4_phi_fu_307_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304;
wire   [63:0] idxprom21_fu_338_p1;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] div_udiv_fu_328_p4;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd1))) begin
        i_reg_245 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_316_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_245 <= i_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_fu_316_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_40_reg_369 <= empty_40_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_360 <= icmp_ln13_fu_316_p2;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_316_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln13_reg_360 == 1'd0)) begin
        if ((empty_40_reg_369 == 1'd1)) begin
            ap_phi_mux_phi_ln167_1_phi_fu_271_p4 = buffer_6_q0;
        end else if ((empty_40_reg_369 == 1'd0)) begin
            ap_phi_mux_phi_ln167_1_phi_fu_271_p4 = buffer_1_q0;
        end else begin
            ap_phi_mux_phi_ln167_1_phi_fu_271_p4 = ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268;
        end
    end else begin
        ap_phi_mux_phi_ln167_1_phi_fu_271_p4 = ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268;
    end
end

always @ (*) begin
    if ((icmp_ln13_reg_360 == 1'd0)) begin
        if ((empty_40_reg_369 == 1'd1)) begin
            ap_phi_mux_phi_ln167_2_phi_fu_283_p4 = buffer_7_q0;
        end else if ((empty_40_reg_369 == 1'd0)) begin
            ap_phi_mux_phi_ln167_2_phi_fu_283_p4 = buffer_2_q0;
        end else begin
            ap_phi_mux_phi_ln167_2_phi_fu_283_p4 = ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280;
        end
    end else begin
        ap_phi_mux_phi_ln167_2_phi_fu_283_p4 = ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280;
    end
end

always @ (*) begin
    if ((icmp_ln13_reg_360 == 1'd0)) begin
        if ((empty_40_reg_369 == 1'd1)) begin
            ap_phi_mux_phi_ln167_3_phi_fu_295_p4 = buffer_8_q0;
        end else if ((empty_40_reg_369 == 1'd0)) begin
            ap_phi_mux_phi_ln167_3_phi_fu_295_p4 = buffer_3_q0;
        end else begin
            ap_phi_mux_phi_ln167_3_phi_fu_295_p4 = ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292;
        end
    end else begin
        ap_phi_mux_phi_ln167_3_phi_fu_295_p4 = ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292;
    end
end

always @ (*) begin
    if ((icmp_ln13_reg_360 == 1'd0)) begin
        if ((empty_40_reg_369 == 1'd1)) begin
            ap_phi_mux_phi_ln167_4_phi_fu_307_p4 = buffer_9_q0;
        end else if ((empty_40_reg_369 == 1'd0)) begin
            ap_phi_mux_phi_ln167_4_phi_fu_307_p4 = buffer_4_q0;
        end else begin
            ap_phi_mux_phi_ln167_4_phi_fu_307_p4 = ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304;
        end
    end else begin
        ap_phi_mux_phi_ln167_4_phi_fu_307_p4 = ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304;
    end
end

always @ (*) begin
    if ((icmp_ln13_reg_360 == 1'd0)) begin
        if ((empty_40_reg_369 == 1'd1)) begin
            ap_phi_mux_phi_ln167_phi_fu_259_p4 = buffer_5_q0;
        end else if ((empty_40_reg_369 == 1'd0)) begin
            ap_phi_mux_phi_ln167_phi_fu_259_p4 = buffer_0_q0;
        end else begin
            ap_phi_mux_phi_ln167_phi_fu_259_p4 = ap_phi_reg_pp0_iter1_phi_ln167_reg_256;
        end
    end else begin
        ap_phi_mux_phi_ln167_phi_fu_259_p4 = ap_phi_reg_pp0_iter1_phi_ln167_reg_256;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_0_ce0 = 1'b1;
    end else begin
        buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_1_ce0 = 1'b1;
    end else begin
        buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_2_ce0 = 1'b1;
    end else begin
        buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_3_ce0 = 1'b1;
    end else begin
        buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_4_ce0 = 1'b1;
    end else begin
        buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_5_ce0 = 1'b1;
    end else begin
        buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_6_ce0 = 1'b1;
    end else begin
        buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_7_ce0 = 1'b1;
    end else begin
        buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_8_ce0 = 1'b1;
    end else begin
        buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_9_ce0 = 1'b1;
    end else begin
        buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_1_V_blk_n = dst_1_V_full_n;
    end else begin
        dst_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_1_V_write = 1'b1;
    end else begin
        dst_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_2_V_blk_n = dst_2_V_full_n;
    end else begin
        dst_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_2_V_write = 1'b1;
    end else begin
        dst_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_3_V_blk_n = dst_3_V_full_n;
    end else begin
        dst_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_3_V_write = 1'b1;
    end else begin
        dst_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_4_V_blk_n = dst_4_V_full_n;
    end else begin
        dst_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_4_V_write = 1'b1;
    end else begin
        dst_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_V_blk_n = dst_V_full_n;
    end else begin
        dst_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_V_write = 1'b1;
    end else begin
        dst_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_316_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_316_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_3_V_full_n == 1'b0) | ((dst_2_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_1_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((icmp_ln13_reg_360 == 1'd0) & (dst_4_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_3_V_full_n == 1'b0) | ((dst_2_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_1_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((icmp_ln13_reg_360 == 1'd0) & (dst_4_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_3_V_full_n == 1'b0) | ((dst_2_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_1_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((icmp_ln13_reg_360 == 1'd0) & (dst_4_V_full_n == 1'b0))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((dst_3_V_full_n == 1'b0) | ((dst_2_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_1_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((dst_V_full_n == 1'b0) & (icmp_ln13_reg_360 == 1'd0)) | ((icmp_ln13_reg_360 == 1'd0) & (dst_4_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268 = 'bx;

assign ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280 = 'bx;

assign ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292 = 'bx;

assign ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304 = 'bx;

assign ap_phi_reg_pp0_iter1_phi_ln167_reg_256 = 'bx;

assign buffer_0_address0 = idxprom21_fu_338_p1;

assign buffer_1_address0 = idxprom21_fu_338_p1;

assign buffer_2_address0 = idxprom21_fu_338_p1;

assign buffer_3_address0 = idxprom21_fu_338_p1;

assign buffer_4_address0 = idxprom21_fu_338_p1;

assign buffer_5_address0 = idxprom21_fu_338_p1;

assign buffer_6_address0 = idxprom21_fu_338_p1;

assign buffer_7_address0 = idxprom21_fu_338_p1;

assign buffer_8_address0 = idxprom21_fu_338_p1;

assign buffer_9_address0 = idxprom21_fu_338_p1;

assign div_udiv_fu_328_p4 = {{i_reg_245[4:1]}};

assign dst_1_V_din = ap_phi_mux_phi_ln167_1_phi_fu_271_p4;

assign dst_2_V_din = ap_phi_mux_phi_ln167_2_phi_fu_283_p4;

assign dst_3_V_din = ap_phi_mux_phi_ln167_3_phi_fu_295_p4;

assign dst_4_V_din = ap_phi_mux_phi_ln167_4_phi_fu_307_p4;

assign dst_V_din = ap_phi_mux_phi_ln167_phi_fu_259_p4;

assign empty_40_fu_352_p1 = i_reg_245[0:0];

assign enable_read_read_fu_74_p2 = enable;

assign i_1_fu_322_p2 = (i_reg_245 + 5'd1);

assign icmp_ln13_fu_316_p2 = ((i_reg_245 == 5'd20) ? 1'b1 : 1'b0);

assign idxprom21_fu_338_p1 = div_udiv_fu_328_p4;

endmodule //top_buf2stream
