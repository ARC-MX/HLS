// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_stream2buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_V_dout,
        src_V_empty_n,
        src_V_read,
        src_1_V_dout,
        src_1_V_empty_n,
        src_1_V_read,
        src_2_V_dout,
        src_2_V_empty_n,
        src_2_V_read,
        src_3_V_dout,
        src_3_V_empty_n,
        src_3_V_read,
        src_4_V_dout,
        src_4_V_empty_n,
        src_4_V_read,
        src_5_V_dout,
        src_5_V_empty_n,
        src_5_V_read,
        src_6_V_dout,
        src_6_V_empty_n,
        src_6_V_read,
        src_7_V_dout,
        src_7_V_empty_n,
        src_7_V_read,
        src_8_V_dout,
        src_8_V_empty_n,
        src_8_V_read,
        src_9_V_dout,
        src_9_V_empty_n,
        src_9_V_read,
        buffer_0_address0,
        buffer_0_ce0,
        buffer_0_we0,
        buffer_0_d0,
        buffer_1_address0,
        buffer_1_ce0,
        buffer_1_we0,
        buffer_1_d0,
        buffer_2_address0,
        buffer_2_ce0,
        buffer_2_we0,
        buffer_2_d0,
        buffer_3_address0,
        buffer_3_ce0,
        buffer_3_we0,
        buffer_3_d0,
        buffer_4_address0,
        buffer_4_ce0,
        buffer_4_we0,
        buffer_4_d0,
        buffer_5_address0,
        buffer_5_ce0,
        buffer_5_we0,
        buffer_5_d0,
        buffer_6_address0,
        buffer_6_ce0,
        buffer_6_we0,
        buffer_6_d0,
        buffer_7_address0,
        buffer_7_ce0,
        buffer_7_we0,
        buffer_7_d0,
        buffer_8_address0,
        buffer_8_ce0,
        buffer_8_we0,
        buffer_8_d0,
        buffer_9_address0,
        buffer_9_ce0,
        buffer_9_we0,
        buffer_9_d0,
        enable
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] src_V_dout;
input   src_V_empty_n;
output   src_V_read;
input  [31:0] src_1_V_dout;
input   src_1_V_empty_n;
output   src_1_V_read;
input  [31:0] src_2_V_dout;
input   src_2_V_empty_n;
output   src_2_V_read;
input  [31:0] src_3_V_dout;
input   src_3_V_empty_n;
output   src_3_V_read;
input  [31:0] src_4_V_dout;
input   src_4_V_empty_n;
output   src_4_V_read;
input  [31:0] src_5_V_dout;
input   src_5_V_empty_n;
output   src_5_V_read;
input  [31:0] src_6_V_dout;
input   src_6_V_empty_n;
output   src_6_V_read;
input  [31:0] src_7_V_dout;
input   src_7_V_empty_n;
output   src_7_V_read;
input  [31:0] src_8_V_dout;
input   src_8_V_empty_n;
output   src_8_V_read;
input  [31:0] src_9_V_dout;
input   src_9_V_empty_n;
output   src_9_V_read;
output  [3:0] buffer_0_address0;
output   buffer_0_ce0;
output   buffer_0_we0;
output  [31:0] buffer_0_d0;
output  [3:0] buffer_1_address0;
output   buffer_1_ce0;
output   buffer_1_we0;
output  [31:0] buffer_1_d0;
output  [3:0] buffer_2_address0;
output   buffer_2_ce0;
output   buffer_2_we0;
output  [31:0] buffer_2_d0;
output  [3:0] buffer_3_address0;
output   buffer_3_ce0;
output   buffer_3_we0;
output  [31:0] buffer_3_d0;
output  [3:0] buffer_4_address0;
output   buffer_4_ce0;
output   buffer_4_we0;
output  [31:0] buffer_4_d0;
output  [3:0] buffer_5_address0;
output   buffer_5_ce0;
output   buffer_5_we0;
output  [31:0] buffer_5_d0;
output  [3:0] buffer_6_address0;
output   buffer_6_ce0;
output   buffer_6_we0;
output  [31:0] buffer_6_d0;
output  [3:0] buffer_7_address0;
output   buffer_7_ce0;
output   buffer_7_we0;
output  [31:0] buffer_7_d0;
output  [3:0] buffer_8_address0;
output   buffer_8_ce0;
output   buffer_8_we0;
output  [31:0] buffer_8_d0;
output  [3:0] buffer_9_address0;
output   buffer_9_ce0;
output   buffer_9_we0;
output  [31:0] buffer_9_d0;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_read;
reg src_1_V_read;
reg src_2_V_read;
reg src_3_V_read;
reg src_4_V_read;
reg src_5_V_read;
reg src_6_V_read;
reg src_7_V_read;
reg src_8_V_read;
reg src_9_V_read;
reg buffer_0_ce0;
reg buffer_0_we0;
reg buffer_1_ce0;
reg buffer_1_we0;
reg buffer_2_ce0;
reg buffer_2_we0;
reg buffer_3_ce0;
reg buffer_3_we0;
reg buffer_4_ce0;
reg buffer_4_we0;
reg buffer_5_ce0;
reg buffer_5_we0;
reg buffer_6_ce0;
reg buffer_6_we0;
reg buffer_7_ce0;
reg buffer_7_we0;
reg buffer_8_ce0;
reg buffer_8_we0;
reg buffer_9_ce0;
reg buffer_9_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_332;
reg    src_1_V_blk_n;
reg    src_2_V_blk_n;
reg    src_3_V_blk_n;
reg    src_4_V_blk_n;
reg    src_5_V_blk_n;
reg    src_6_V_blk_n;
reg    src_7_V_blk_n;
reg    src_8_V_blk_n;
reg    src_9_V_blk_n;
reg   [4:0] i_reg_288;
wire   [0:0] enable_read_read_fu_82_p2;
wire   [0:0] tmp_fu_300_p3;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln29_fu_308_p2;
reg   [4:0] add_ln29_reg_336;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [4:0] ap_phi_mux_i_phi_fu_292_p4;
wire   [63:0] zext_ln29_fu_314_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_82_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_82_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_82_p2 == 1'd1))) begin
        i_reg_288 <= 5'd9;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_288 <= add_ln29_reg_336;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_300_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln29_reg_336 <= add_ln29_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_332 <= ap_phi_mux_i_phi_fu_292_p4[32'd4];
    end
end

always @ (*) begin
    if ((tmp_fu_300_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_292_p4 = add_ln29_reg_336;
    end else begin
        ap_phi_mux_i_phi_fu_292_p4 = i_reg_288;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_0_ce0 = 1'b1;
    end else begin
        buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_0_we0 = 1'b1;
    end else begin
        buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_1_ce0 = 1'b1;
    end else begin
        buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_1_we0 = 1'b1;
    end else begin
        buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_2_ce0 = 1'b1;
    end else begin
        buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_2_we0 = 1'b1;
    end else begin
        buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_3_ce0 = 1'b1;
    end else begin
        buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_3_we0 = 1'b1;
    end else begin
        buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_4_ce0 = 1'b1;
    end else begin
        buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_4_we0 = 1'b1;
    end else begin
        buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_5_ce0 = 1'b1;
    end else begin
        buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_5_we0 = 1'b1;
    end else begin
        buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_6_ce0 = 1'b1;
    end else begin
        buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_6_we0 = 1'b1;
    end else begin
        buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_7_ce0 = 1'b1;
    end else begin
        buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_7_we0 = 1'b1;
    end else begin
        buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_8_ce0 = 1'b1;
    end else begin
        buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_8_we0 = 1'b1;
    end else begin
        buffer_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_9_ce0 = 1'b1;
    end else begin
        buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_9_we0 = 1'b1;
    end else begin
        buffer_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_1_V_blk_n = src_1_V_empty_n;
    end else begin
        src_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_1_V_read = 1'b1;
    end else begin
        src_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_2_V_blk_n = src_2_V_empty_n;
    end else begin
        src_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_2_V_read = 1'b1;
    end else begin
        src_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_3_V_blk_n = src_3_V_empty_n;
    end else begin
        src_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_3_V_read = 1'b1;
    end else begin
        src_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_4_V_blk_n = src_4_V_empty_n;
    end else begin
        src_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_4_V_read = 1'b1;
    end else begin
        src_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_5_V_blk_n = src_5_V_empty_n;
    end else begin
        src_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_5_V_read = 1'b1;
    end else begin
        src_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_6_V_blk_n = src_6_V_empty_n;
    end else begin
        src_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_6_V_read = 1'b1;
    end else begin
        src_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_7_V_blk_n = src_7_V_empty_n;
    end else begin
        src_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_7_V_read = 1'b1;
    end else begin
        src_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_8_V_blk_n = src_8_V_empty_n;
    end else begin
        src_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_8_V_read = 1'b1;
    end else begin
        src_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_9_V_blk_n = src_9_V_empty_n;
    end else begin
        src_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_9_V_read = 1'b1;
    end else begin
        src_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_V_blk_n = src_V_empty_n;
    end else begin
        src_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_V_read = 1'b1;
    end else begin
        src_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_82_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_82_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_300_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_300_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_308_p2 = ($signed(ap_phi_mux_i_phi_fu_292_p4) + $signed(5'd31));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_1_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_2_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_3_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_4_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_5_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_6_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_7_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_8_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_9_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_1_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_2_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_3_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_4_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_5_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_6_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_7_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_8_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_9_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((src_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_1_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_2_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_3_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_4_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_5_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_6_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_7_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_8_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)) | ((src_9_V_empty_n == 1'b0) & (tmp_reg_332 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_0_address0 = zext_ln29_fu_314_p1;

assign buffer_0_d0 = src_V_dout;

assign buffer_1_address0 = zext_ln29_fu_314_p1;

assign buffer_1_d0 = src_1_V_dout;

assign buffer_2_address0 = zext_ln29_fu_314_p1;

assign buffer_2_d0 = src_2_V_dout;

assign buffer_3_address0 = zext_ln29_fu_314_p1;

assign buffer_3_d0 = src_3_V_dout;

assign buffer_4_address0 = zext_ln29_fu_314_p1;

assign buffer_4_d0 = src_4_V_dout;

assign buffer_5_address0 = zext_ln29_fu_314_p1;

assign buffer_5_d0 = src_5_V_dout;

assign buffer_6_address0 = zext_ln29_fu_314_p1;

assign buffer_6_d0 = src_6_V_dout;

assign buffer_7_address0 = zext_ln29_fu_314_p1;

assign buffer_7_d0 = src_7_V_dout;

assign buffer_8_address0 = zext_ln29_fu_314_p1;

assign buffer_8_d0 = src_8_V_dout;

assign buffer_9_address0 = zext_ln29_fu_314_p1;

assign buffer_9_d0 = src_9_V_dout;

assign enable_read_read_fu_82_p2 = enable;

assign tmp_fu_300_p3 = ap_phi_mux_i_phi_fu_292_p4[32'd4];

assign zext_ln29_fu_314_p1 = i_reg_288;

endmodule //top_stream2buf
