-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_buf2stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_0_ce0 : OUT STD_LOGIC;
    buffer_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_1_ce0 : OUT STD_LOGIC;
    buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_4_ce0 : OUT STD_LOGIC;
    buffer_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_5_ce0 : OUT STD_LOGIC;
    buffer_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_6_ce0 : OUT STD_LOGIC;
    buffer_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_7_ce0 : OUT STD_LOGIC;
    buffer_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_8_ce0 : OUT STD_LOGIC;
    buffer_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_9_ce0 : OUT STD_LOGIC;
    buffer_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_V_full_n : IN STD_LOGIC;
    dst_V_write : OUT STD_LOGIC;
    dst_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_1_V_full_n : IN STD_LOGIC;
    dst_1_V_write : OUT STD_LOGIC;
    dst_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_2_V_full_n : IN STD_LOGIC;
    dst_2_V_write : OUT STD_LOGIC;
    dst_3_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_3_V_full_n : IN STD_LOGIC;
    dst_3_V_write : OUT STD_LOGIC;
    dst_4_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_4_V_full_n : IN STD_LOGIC;
    dst_4_V_write : OUT STD_LOGIC;
    enable : IN STD_LOGIC );
end;


architecture behav of top_buf2stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln13_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_1_V_blk_n : STD_LOGIC;
    signal dst_2_V_blk_n : STD_LOGIC;
    signal dst_3_V_blk_n : STD_LOGIC;
    signal dst_4_V_blk_n : STD_LOGIC;
    signal i_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal enable_read_read_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_322_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_40_fu_352_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_40_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_phi_ln167_phi_fu_259_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln167_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln167_1_phi_fu_271_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln167_2_phi_fu_283_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln167_3_phi_fu_295_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln167_4_phi_fu_307_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxprom21_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal div_udiv_fu_328_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_74_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_74_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_74_p2 = ap_const_lv1_1))) then 
                i_reg_245 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_316_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_245 <= i_1_fu_322_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_fu_316_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_40_reg_369 <= empty_40_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln13_reg_360 <= icmp_ln13_fu_316_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable_read_read_fu_74_p2, icmp_ln13_fu_316_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_74_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_74_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_316_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_316_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(dst_V_full_n, dst_1_V_full_n, dst_2_V_full_n, dst_3_V_full_n, dst_4_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dst_3_V_full_n = ap_const_logic_0) or ((dst_2_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_1_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((icmp_ln13_reg_360 = ap_const_lv1_0) and (dst_4_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dst_V_full_n, dst_1_V_full_n, dst_2_V_full_n, dst_3_V_full_n, dst_4_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dst_3_V_full_n = ap_const_logic_0) or ((dst_2_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_1_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((icmp_ln13_reg_360 = ap_const_lv1_0) and (dst_4_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dst_V_full_n, dst_1_V_full_n, dst_2_V_full_n, dst_3_V_full_n, dst_4_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dst_3_V_full_n = ap_const_logic_0) or ((dst_2_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_1_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((icmp_ln13_reg_360 = ap_const_lv1_0) and (dst_4_V_full_n = ap_const_logic_0))));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(dst_V_full_n, dst_1_V_full_n, dst_2_V_full_n, dst_3_V_full_n, dst_4_V_full_n, icmp_ln13_reg_360)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((dst_3_V_full_n = ap_const_logic_0) or ((dst_2_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_1_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((dst_V_full_n = ap_const_logic_0) and (icmp_ln13_reg_360 = ap_const_lv1_0)) or ((icmp_ln13_reg_360 = ap_const_lv1_0) and (dst_4_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln13_fu_316_p2)
    begin
        if ((icmp_ln13_fu_316_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln167_1_phi_fu_271_p4_assign_proc : process(buffer_1_q0, buffer_6_q0, icmp_ln13_reg_360, empty_40_reg_369, ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268)
    begin
        if ((icmp_ln13_reg_360 = ap_const_lv1_0)) then
            if ((empty_40_reg_369 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln167_1_phi_fu_271_p4 <= buffer_6_q0;
            elsif ((empty_40_reg_369 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln167_1_phi_fu_271_p4 <= buffer_1_q0;
            else 
                ap_phi_mux_phi_ln167_1_phi_fu_271_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268;
            end if;
        else 
            ap_phi_mux_phi_ln167_1_phi_fu_271_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268;
        end if; 
    end process;


    ap_phi_mux_phi_ln167_2_phi_fu_283_p4_assign_proc : process(buffer_2_q0, buffer_7_q0, icmp_ln13_reg_360, empty_40_reg_369, ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280)
    begin
        if ((icmp_ln13_reg_360 = ap_const_lv1_0)) then
            if ((empty_40_reg_369 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln167_2_phi_fu_283_p4 <= buffer_7_q0;
            elsif ((empty_40_reg_369 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln167_2_phi_fu_283_p4 <= buffer_2_q0;
            else 
                ap_phi_mux_phi_ln167_2_phi_fu_283_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280;
            end if;
        else 
            ap_phi_mux_phi_ln167_2_phi_fu_283_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280;
        end if; 
    end process;


    ap_phi_mux_phi_ln167_3_phi_fu_295_p4_assign_proc : process(buffer_3_q0, buffer_8_q0, icmp_ln13_reg_360, empty_40_reg_369, ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292)
    begin
        if ((icmp_ln13_reg_360 = ap_const_lv1_0)) then
            if ((empty_40_reg_369 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln167_3_phi_fu_295_p4 <= buffer_8_q0;
            elsif ((empty_40_reg_369 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln167_3_phi_fu_295_p4 <= buffer_3_q0;
            else 
                ap_phi_mux_phi_ln167_3_phi_fu_295_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292;
            end if;
        else 
            ap_phi_mux_phi_ln167_3_phi_fu_295_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292;
        end if; 
    end process;


    ap_phi_mux_phi_ln167_4_phi_fu_307_p4_assign_proc : process(buffer_4_q0, buffer_9_q0, icmp_ln13_reg_360, empty_40_reg_369, ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304)
    begin
        if ((icmp_ln13_reg_360 = ap_const_lv1_0)) then
            if ((empty_40_reg_369 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln167_4_phi_fu_307_p4 <= buffer_9_q0;
            elsif ((empty_40_reg_369 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln167_4_phi_fu_307_p4 <= buffer_4_q0;
            else 
                ap_phi_mux_phi_ln167_4_phi_fu_307_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304;
            end if;
        else 
            ap_phi_mux_phi_ln167_4_phi_fu_307_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304;
        end if; 
    end process;


    ap_phi_mux_phi_ln167_phi_fu_259_p4_assign_proc : process(buffer_0_q0, buffer_5_q0, icmp_ln13_reg_360, empty_40_reg_369, ap_phi_reg_pp0_iter1_phi_ln167_reg_256)
    begin
        if ((icmp_ln13_reg_360 = ap_const_lv1_0)) then
            if ((empty_40_reg_369 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln167_phi_fu_259_p4 <= buffer_5_q0;
            elsif ((empty_40_reg_369 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln167_phi_fu_259_p4 <= buffer_0_q0;
            else 
                ap_phi_mux_phi_ln167_phi_fu_259_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_reg_256;
            end if;
        else 
            ap_phi_mux_phi_ln167_phi_fu_259_p4 <= ap_phi_reg_pp0_iter1_phi_ln167_reg_256;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_phi_ln167_1_reg_268 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_phi_ln167_2_reg_280 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_phi_ln167_3_reg_292 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_phi_ln167_4_reg_304 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_phi_ln167_reg_256 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_0_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_0_ce0 <= ap_const_logic_1;
        else 
            buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_1_ce0 <= ap_const_logic_1;
        else 
            buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_2_ce0 <= ap_const_logic_1;
        else 
            buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_3_ce0 <= ap_const_logic_1;
        else 
            buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_4_ce0 <= ap_const_logic_1;
        else 
            buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_5_ce0 <= ap_const_logic_1;
        else 
            buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_6_ce0 <= ap_const_logic_1;
        else 
            buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_7_ce0 <= ap_const_logic_1;
        else 
            buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_8_ce0 <= ap_const_logic_1;
        else 
            buffer_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_address0 <= idxprom21_fu_338_p1(4 - 1 downto 0);

    buffer_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_9_ce0 <= ap_const_logic_1;
        else 
            buffer_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    div_udiv_fu_328_p4 <= i_reg_245(4 downto 1);

    dst_1_V_blk_n_assign_proc : process(dst_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln13_reg_360)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_1_V_blk_n <= dst_1_V_full_n;
        else 
            dst_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_1_V_din <= ap_phi_mux_phi_ln167_1_phi_fu_271_p4;

    dst_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_1_V_write <= ap_const_logic_1;
        else 
            dst_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_2_V_blk_n_assign_proc : process(dst_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln13_reg_360)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_2_V_blk_n <= dst_2_V_full_n;
        else 
            dst_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_2_V_din <= ap_phi_mux_phi_ln167_2_phi_fu_283_p4;

    dst_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_2_V_write <= ap_const_logic_1;
        else 
            dst_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_3_V_blk_n_assign_proc : process(dst_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_3_V_blk_n <= dst_3_V_full_n;
        else 
            dst_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_3_V_din <= ap_phi_mux_phi_ln167_3_phi_fu_295_p4;

    dst_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_3_V_write <= ap_const_logic_1;
        else 
            dst_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_4_V_blk_n_assign_proc : process(dst_4_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln13_reg_360)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_4_V_blk_n <= dst_4_V_full_n;
        else 
            dst_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_4_V_din <= ap_phi_mux_phi_ln167_4_phi_fu_307_p4;

    dst_4_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_4_V_write <= ap_const_logic_1;
        else 
            dst_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_blk_n_assign_proc : process(dst_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln13_reg_360)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_V_blk_n <= dst_V_full_n;
        else 
            dst_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_V_din <= ap_phi_mux_phi_ln167_phi_fu_259_p4;

    dst_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_360, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_V_write <= ap_const_logic_1;
        else 
            dst_V_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_40_fu_352_p1 <= i_reg_245(1 - 1 downto 0);
    enable_read_read_fu_74_p2 <= (0=>enable, others=>'-');
    i_1_fu_322_p2 <= std_logic_vector(unsigned(i_reg_245) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_316_p2 <= "1" when (i_reg_245 = ap_const_lv5_14) else "0";
    idxprom21_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_udiv_fu_328_p4),64));
end behav;
