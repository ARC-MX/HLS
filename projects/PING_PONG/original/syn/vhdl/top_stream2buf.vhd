-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_stream2buf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_V_empty_n : IN STD_LOGIC;
    src_V_read : OUT STD_LOGIC;
    src_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_1_V_empty_n : IN STD_LOGIC;
    src_1_V_read : OUT STD_LOGIC;
    src_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_2_V_empty_n : IN STD_LOGIC;
    src_2_V_read : OUT STD_LOGIC;
    src_3_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_3_V_empty_n : IN STD_LOGIC;
    src_3_V_read : OUT STD_LOGIC;
    src_4_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_4_V_empty_n : IN STD_LOGIC;
    src_4_V_read : OUT STD_LOGIC;
    src_5_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_5_V_empty_n : IN STD_LOGIC;
    src_5_V_read : OUT STD_LOGIC;
    src_6_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_6_V_empty_n : IN STD_LOGIC;
    src_6_V_read : OUT STD_LOGIC;
    src_7_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_7_V_empty_n : IN STD_LOGIC;
    src_7_V_read : OUT STD_LOGIC;
    src_8_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_8_V_empty_n : IN STD_LOGIC;
    src_8_V_read : OUT STD_LOGIC;
    src_9_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_9_V_empty_n : IN STD_LOGIC;
    src_9_V_read : OUT STD_LOGIC;
    buffer_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_0_ce0 : OUT STD_LOGIC;
    buffer_0_we0 : OUT STD_LOGIC;
    buffer_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_1_ce0 : OUT STD_LOGIC;
    buffer_1_we0 : OUT STD_LOGIC;
    buffer_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_we0 : OUT STD_LOGIC;
    buffer_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_we0 : OUT STD_LOGIC;
    buffer_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_4_ce0 : OUT STD_LOGIC;
    buffer_4_we0 : OUT STD_LOGIC;
    buffer_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_5_ce0 : OUT STD_LOGIC;
    buffer_5_we0 : OUT STD_LOGIC;
    buffer_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_6_ce0 : OUT STD_LOGIC;
    buffer_6_we0 : OUT STD_LOGIC;
    buffer_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_7_ce0 : OUT STD_LOGIC;
    buffer_7_we0 : OUT STD_LOGIC;
    buffer_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_8_ce0 : OUT STD_LOGIC;
    buffer_8_we0 : OUT STD_LOGIC;
    buffer_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_9_ce0 : OUT STD_LOGIC;
    buffer_9_we0 : OUT STD_LOGIC;
    buffer_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    enable : IN STD_LOGIC );
end;


architecture behav of top_stream2buf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_1_V_blk_n : STD_LOGIC;
    signal src_2_V_blk_n : STD_LOGIC;
    signal src_3_V_blk_n : STD_LOGIC;
    signal src_4_V_blk_n : STD_LOGIC;
    signal src_5_V_blk_n : STD_LOGIC;
    signal src_6_V_blk_n : STD_LOGIC;
    signal src_7_V_blk_n : STD_LOGIC;
    signal src_8_V_blk_n : STD_LOGIC;
    signal src_9_V_blk_n : STD_LOGIC;
    signal i_reg_288 : STD_LOGIC_VECTOR (4 downto 0);
    signal enable_read_read_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln29_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln29_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_292_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                i_reg_288 <= ap_const_lv5_9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_288 <= add_ln29_reg_336;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_300_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln29_reg_336 <= add_ln29_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_332 <= ap_phi_mux_i_phi_fu_292_p4(4 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable_read_read_fu_82_p2, tmp_fu_300_p3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_300_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_300_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln29_fu_308_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_292_p4) + unsigned(ap_const_lv5_1F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(src_V_empty_n, src_1_V_empty_n, src_2_V_empty_n, src_3_V_empty_n, src_4_V_empty_n, src_5_V_empty_n, src_6_V_empty_n, src_7_V_empty_n, src_8_V_empty_n, src_9_V_empty_n, ap_enable_reg_pp0_iter1, tmp_reg_332)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_1_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_2_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_3_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_4_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_5_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_6_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_7_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_8_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_9_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_V_empty_n, src_1_V_empty_n, src_2_V_empty_n, src_3_V_empty_n, src_4_V_empty_n, src_5_V_empty_n, src_6_V_empty_n, src_7_V_empty_n, src_8_V_empty_n, src_9_V_empty_n, ap_enable_reg_pp0_iter1, tmp_reg_332)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_1_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_2_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_3_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_4_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_5_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_6_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_7_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_8_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_9_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0))));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(src_V_empty_n, src_1_V_empty_n, src_2_V_empty_n, src_3_V_empty_n, src_4_V_empty_n, src_5_V_empty_n, src_6_V_empty_n, src_7_V_empty_n, src_8_V_empty_n, src_9_V_empty_n, tmp_reg_332)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((src_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_1_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_2_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_3_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_4_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_5_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_6_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_7_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_8_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)) or ((src_9_V_empty_n = ap_const_logic_0) and (tmp_reg_332 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_300_p3)
    begin
        if ((tmp_fu_300_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_292_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332, i_reg_288, add_ln29_reg_336)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_292_p4 <= add_ln29_reg_336;
        else 
            ap_phi_mux_i_phi_fu_292_p4 <= i_reg_288;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_0_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_0_ce0 <= ap_const_logic_1;
        else 
            buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_0_d0 <= src_V_dout;

    buffer_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_0_we0 <= ap_const_logic_1;
        else 
            buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_1_ce0 <= ap_const_logic_1;
        else 
            buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_d0 <= src_1_V_dout;

    buffer_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_1_we0 <= ap_const_logic_1;
        else 
            buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_2_ce0 <= ap_const_logic_1;
        else 
            buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_d0 <= src_2_V_dout;

    buffer_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_2_we0 <= ap_const_logic_1;
        else 
            buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_3_ce0 <= ap_const_logic_1;
        else 
            buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_d0 <= src_3_V_dout;

    buffer_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_3_we0 <= ap_const_logic_1;
        else 
            buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_4_ce0 <= ap_const_logic_1;
        else 
            buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_d0 <= src_4_V_dout;

    buffer_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_4_we0 <= ap_const_logic_1;
        else 
            buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_5_ce0 <= ap_const_logic_1;
        else 
            buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_d0 <= src_5_V_dout;

    buffer_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_5_we0 <= ap_const_logic_1;
        else 
            buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_6_ce0 <= ap_const_logic_1;
        else 
            buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_d0 <= src_6_V_dout;

    buffer_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_6_we0 <= ap_const_logic_1;
        else 
            buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_7_ce0 <= ap_const_logic_1;
        else 
            buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_d0 <= src_7_V_dout;

    buffer_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_7_we0 <= ap_const_logic_1;
        else 
            buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_8_ce0 <= ap_const_logic_1;
        else 
            buffer_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_d0 <= src_8_V_dout;

    buffer_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_8_we0 <= ap_const_logic_1;
        else 
            buffer_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_address0 <= zext_ln29_fu_314_p1(4 - 1 downto 0);

    buffer_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_9_ce0 <= ap_const_logic_1;
        else 
            buffer_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_d0 <= src_9_V_dout;

    buffer_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_9_we0 <= ap_const_logic_1;
        else 
            buffer_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    enable_read_read_fu_82_p2 <= (0=>enable, others=>'-');

    src_1_V_blk_n_assign_proc : process(src_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_1_V_blk_n <= src_1_V_empty_n;
        else 
            src_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_1_V_read <= ap_const_logic_1;
        else 
            src_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_2_V_blk_n_assign_proc : process(src_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_2_V_blk_n <= src_2_V_empty_n;
        else 
            src_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_2_V_read <= ap_const_logic_1;
        else 
            src_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_3_V_blk_n_assign_proc : process(src_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_3_V_blk_n <= src_3_V_empty_n;
        else 
            src_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_3_V_read <= ap_const_logic_1;
        else 
            src_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_4_V_blk_n_assign_proc : process(src_4_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_4_V_blk_n <= src_4_V_empty_n;
        else 
            src_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_4_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_4_V_read <= ap_const_logic_1;
        else 
            src_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_5_V_blk_n_assign_proc : process(src_5_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_5_V_blk_n <= src_5_V_empty_n;
        else 
            src_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_5_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_5_V_read <= ap_const_logic_1;
        else 
            src_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_6_V_blk_n_assign_proc : process(src_6_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_6_V_blk_n <= src_6_V_empty_n;
        else 
            src_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_6_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_6_V_read <= ap_const_logic_1;
        else 
            src_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_7_V_blk_n_assign_proc : process(src_7_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_7_V_blk_n <= src_7_V_empty_n;
        else 
            src_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_7_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_7_V_read <= ap_const_logic_1;
        else 
            src_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_8_V_blk_n_assign_proc : process(src_8_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_8_V_blk_n <= src_8_V_empty_n;
        else 
            src_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_8_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_8_V_read <= ap_const_logic_1;
        else 
            src_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_9_V_blk_n_assign_proc : process(src_9_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_9_V_blk_n <= src_9_V_empty_n;
        else 
            src_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_9_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_9_V_read <= ap_const_logic_1;
        else 
            src_9_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_V_blk_n_assign_proc : process(src_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_332)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_V_blk_n <= src_V_empty_n;
        else 
            src_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_V_read <= ap_const_logic_1;
        else 
            src_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_300_p3 <= ap_phi_mux_i_phi_fu_292_p4(4 downto 4);
    zext_ln29_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_288),64));
end behav;
