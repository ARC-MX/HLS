// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="packed_conv_paper_packed_conv_paper,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.128875,HLS_SYN_LAT=17285,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=41,HLS_SYN_LUT=120,HLS_VERSION=2020_1}" *)

module packed_conv_paper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        kernel,
        output_r_i,
        output_r_o,
        output_r_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] input_r;
input  [9:0] kernel;
input  [19:0] output_r_i;
output  [19:0] output_r_o;
output   output_r_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[19:0] output_r_o;
reg output_r_o_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [21:0] zext_ln85_fu_112_p1;
reg   [21:0] zext_ln85_reg_168;
wire    ap_CS_fsm_state4;
wire   [14:0] add_ln85_fu_121_p2;
wire    ap_CS_fsm_state5;
reg   [14:0] indvar_flatten95_reg_93;
wire   [0:0] icmp_ln85_fu_115_p2;
wire   [19:0] grp_fu_151_p2;
wire   [21:0] shl_ln_fu_127_p3;
wire   [21:0] add_ln1192_fu_135_p2;
wire   [9:0] grp_fu_151_p0;
wire   [9:0] grp_fu_151_p1;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;
wire   [19:0] grp_fu_151_p00;
wire   [19:0] grp_fu_151_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

packed_conv_paper_mul_mul_10ns_10ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 20 ))
mul_mul_10ns_10ns_20_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_151_p0),
    .din1(grp_fu_151_p1),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten95_reg_93 <= add_ln85_fu_121_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten95_reg_93 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln85_reg_168[19 : 0] <= zext_ln85_fu_112_p1[19 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_o = {{add_ln1192_fu_135_p2[21:2]}};
    end else begin
        output_r_o = output_r_i;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_o_ap_vld = 1'b1;
    end else begin
        output_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln85_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_fu_135_p2 = (zext_ln85_reg_168 + shl_ln_fu_127_p3);

assign add_ln85_fu_121_p2 = (indvar_flatten95_reg_93 + 15'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_151_p0 = grp_fu_151_p00;

assign grp_fu_151_p00 = input_r;

assign grp_fu_151_p1 = grp_fu_151_p10;

assign grp_fu_151_p10 = kernel;

assign icmp_ln85_fu_115_p2 = ((indvar_flatten95_reg_93 == 15'd17280) ? 1'b1 : 1'b0);

assign shl_ln_fu_127_p3 = {{output_r_i}, {2'd0}};

assign zext_ln85_fu_112_p1 = grp_fu_151_p2;

always @ (posedge ap_clk) begin
    zext_ln85_reg_168[21:20] <= 2'b00;
end

endmodule //packed_conv_paper
