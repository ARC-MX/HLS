// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.027500,HLS_SYN_LAT=44,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1495,HLS_SYN_LUT=1752,HLS_VERSION=2020_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_stream_V_dout,
        weight_stream_V_empty_n,
        weight_stream_V_read,
        pe_input_stream_V_0_din,
        pe_input_stream_V_0_full_n,
        pe_input_stream_V_0_write,
        pe_input_stream_V_1_din,
        pe_input_stream_V_1_full_n,
        pe_input_stream_V_1_write,
        pe_input_stream_V_2_din,
        pe_input_stream_V_2_full_n,
        pe_input_stream_V_2_write,
        pe_input_stream_V_3_din,
        pe_input_stream_V_3_full_n,
        pe_input_stream_V_3_write,
        pe_input_stream_V_4_din,
        pe_input_stream_V_4_full_n,
        pe_input_stream_V_4_write,
        pe_input_stream_V_5_din,
        pe_input_stream_V_5_full_n,
        pe_input_stream_V_5_write,
        pe_input_stream_V_6_din,
        pe_input_stream_V_6_full_n,
        pe_input_stream_V_6_write,
        pe_input_stream_V_7_din,
        pe_input_stream_V_7_full_n,
        pe_input_stream_V_7_write,
        pe_input_stream_V_8_din,
        pe_input_stream_V_8_full_n,
        pe_input_stream_V_8_write,
        pe_weight_stream_V_din,
        pe_weight_stream_V_full_n,
        pe_weight_stream_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] weight_stream_V_dout;
input   weight_stream_V_empty_n;
output   weight_stream_V_read;
output  [7:0] pe_input_stream_V_0_din;
input   pe_input_stream_V_0_full_n;
output   pe_input_stream_V_0_write;
output  [7:0] pe_input_stream_V_1_din;
input   pe_input_stream_V_1_full_n;
output   pe_input_stream_V_1_write;
output  [7:0] pe_input_stream_V_2_din;
input   pe_input_stream_V_2_full_n;
output   pe_input_stream_V_2_write;
output  [7:0] pe_input_stream_V_3_din;
input   pe_input_stream_V_3_full_n;
output   pe_input_stream_V_3_write;
output  [7:0] pe_input_stream_V_4_din;
input   pe_input_stream_V_4_full_n;
output   pe_input_stream_V_4_write;
output  [7:0] pe_input_stream_V_5_din;
input   pe_input_stream_V_5_full_n;
output   pe_input_stream_V_5_write;
output  [7:0] pe_input_stream_V_6_din;
input   pe_input_stream_V_6_full_n;
output   pe_input_stream_V_6_write;
output  [7:0] pe_input_stream_V_7_din;
input   pe_input_stream_V_7_full_n;
output   pe_input_stream_V_7_write;
output  [7:0] pe_input_stream_V_8_din;
input   pe_input_stream_V_8_full_n;
output   pe_input_stream_V_8_write;
output  [7:0] pe_weight_stream_V_din;
input   pe_weight_stream_V_full_n;
output   pe_weight_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_stream_V_read;
reg pe_input_stream_V_0_write;
reg pe_input_stream_V_1_write;
reg pe_input_stream_V_2_write;
reg pe_input_stream_V_3_write;
reg pe_input_stream_V_4_write;
reg pe_input_stream_V_5_write;
reg pe_input_stream_V_6_write;
reg pe_input_stream_V_7_write;
reg pe_input_stream_V_8_write;
reg pe_weight_stream_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_pe_fu_48_ap_start;
wire    grp_pe_fu_48_ap_done;
wire    grp_pe_fu_48_ap_idle;
wire    grp_pe_fu_48_ap_ready;
wire    grp_pe_fu_48_weight_stream_V_read;
wire   [7:0] grp_pe_fu_48_pe_weight_stream_V_din;
wire    grp_pe_fu_48_pe_weight_stream_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_1_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_1_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_2_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_2_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_3_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_3_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_4_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_4_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_5_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_5_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_6_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_6_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_7_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_7_V_V_write;
wire   [7:0] grp_pe_fu_48_pe_input_stream_8_V_V_din;
wire    grp_pe_fu_48_pe_input_stream_8_V_V_write;
reg    grp_pe_fu_48_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_pe_fu_48_ap_start_reg = 1'b0;
end

top_pe grp_pe_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pe_fu_48_ap_start),
    .ap_done(grp_pe_fu_48_ap_done),
    .ap_idle(grp_pe_fu_48_ap_idle),
    .ap_ready(grp_pe_fu_48_ap_ready),
    .weight_stream_V_dout(weight_stream_V_dout),
    .weight_stream_V_empty_n(weight_stream_V_empty_n),
    .weight_stream_V_read(grp_pe_fu_48_weight_stream_V_read),
    .pe_weight_stream_V_din(grp_pe_fu_48_pe_weight_stream_V_din),
    .pe_weight_stream_V_full_n(pe_weight_stream_V_full_n),
    .pe_weight_stream_V_write(grp_pe_fu_48_pe_weight_stream_V_write),
    .pe_input_stream_V_V_din(grp_pe_fu_48_pe_input_stream_V_V_din),
    .pe_input_stream_V_V_full_n(pe_input_stream_V_0_full_n),
    .pe_input_stream_V_V_write(grp_pe_fu_48_pe_input_stream_V_V_write),
    .pe_input_stream_1_V_V_din(grp_pe_fu_48_pe_input_stream_1_V_V_din),
    .pe_input_stream_1_V_V_full_n(pe_input_stream_V_1_full_n),
    .pe_input_stream_1_V_V_write(grp_pe_fu_48_pe_input_stream_1_V_V_write),
    .pe_input_stream_2_V_V_din(grp_pe_fu_48_pe_input_stream_2_V_V_din),
    .pe_input_stream_2_V_V_full_n(pe_input_stream_V_2_full_n),
    .pe_input_stream_2_V_V_write(grp_pe_fu_48_pe_input_stream_2_V_V_write),
    .pe_input_stream_3_V_V_din(grp_pe_fu_48_pe_input_stream_3_V_V_din),
    .pe_input_stream_3_V_V_full_n(pe_input_stream_V_3_full_n),
    .pe_input_stream_3_V_V_write(grp_pe_fu_48_pe_input_stream_3_V_V_write),
    .pe_input_stream_4_V_V_din(grp_pe_fu_48_pe_input_stream_4_V_V_din),
    .pe_input_stream_4_V_V_full_n(pe_input_stream_V_4_full_n),
    .pe_input_stream_4_V_V_write(grp_pe_fu_48_pe_input_stream_4_V_V_write),
    .pe_input_stream_5_V_V_din(grp_pe_fu_48_pe_input_stream_5_V_V_din),
    .pe_input_stream_5_V_V_full_n(pe_input_stream_V_5_full_n),
    .pe_input_stream_5_V_V_write(grp_pe_fu_48_pe_input_stream_5_V_V_write),
    .pe_input_stream_6_V_V_din(grp_pe_fu_48_pe_input_stream_6_V_V_din),
    .pe_input_stream_6_V_V_full_n(pe_input_stream_V_6_full_n),
    .pe_input_stream_6_V_V_write(grp_pe_fu_48_pe_input_stream_6_V_V_write),
    .pe_input_stream_7_V_V_din(grp_pe_fu_48_pe_input_stream_7_V_V_din),
    .pe_input_stream_7_V_V_full_n(pe_input_stream_V_7_full_n),
    .pe_input_stream_7_V_V_write(grp_pe_fu_48_pe_input_stream_7_V_V_write),
    .pe_input_stream_8_V_V_din(grp_pe_fu_48_pe_input_stream_8_V_V_din),
    .pe_input_stream_8_V_V_full_n(pe_input_stream_V_8_full_n),
    .pe_input_stream_8_V_V_write(grp_pe_fu_48_pe_input_stream_8_V_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pe_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pe_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_pe_fu_48_ap_ready == 1'b1)) begin
            grp_pe_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_pe_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pe_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_0_write = grp_pe_fu_48_pe_input_stream_V_V_write;
    end else begin
        pe_input_stream_V_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_1_write = grp_pe_fu_48_pe_input_stream_1_V_V_write;
    end else begin
        pe_input_stream_V_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_2_write = grp_pe_fu_48_pe_input_stream_2_V_V_write;
    end else begin
        pe_input_stream_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_3_write = grp_pe_fu_48_pe_input_stream_3_V_V_write;
    end else begin
        pe_input_stream_V_3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_4_write = grp_pe_fu_48_pe_input_stream_4_V_V_write;
    end else begin
        pe_input_stream_V_4_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_5_write = grp_pe_fu_48_pe_input_stream_5_V_V_write;
    end else begin
        pe_input_stream_V_5_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_6_write = grp_pe_fu_48_pe_input_stream_6_V_V_write;
    end else begin
        pe_input_stream_V_6_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_7_write = grp_pe_fu_48_pe_input_stream_7_V_V_write;
    end else begin
        pe_input_stream_V_7_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_input_stream_V_8_write = grp_pe_fu_48_pe_input_stream_8_V_V_write;
    end else begin
        pe_input_stream_V_8_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pe_weight_stream_V_write = grp_pe_fu_48_pe_weight_stream_V_write;
    end else begin
        pe_weight_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_stream_V_read = grp_pe_fu_48_weight_stream_V_read;
    end else begin
        weight_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pe_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_pe_fu_48_ap_start = grp_pe_fu_48_ap_start_reg;

assign pe_input_stream_V_0_din = grp_pe_fu_48_pe_input_stream_V_V_din;

assign pe_input_stream_V_1_din = grp_pe_fu_48_pe_input_stream_1_V_V_din;

assign pe_input_stream_V_2_din = grp_pe_fu_48_pe_input_stream_2_V_V_din;

assign pe_input_stream_V_3_din = grp_pe_fu_48_pe_input_stream_3_V_V_din;

assign pe_input_stream_V_4_din = grp_pe_fu_48_pe_input_stream_4_V_V_din;

assign pe_input_stream_V_5_din = grp_pe_fu_48_pe_input_stream_5_V_V_din;

assign pe_input_stream_V_6_din = grp_pe_fu_48_pe_input_stream_6_V_V_din;

assign pe_input_stream_V_7_din = grp_pe_fu_48_pe_input_stream_7_V_V_din;

assign pe_input_stream_V_8_din = grp_pe_fu_48_pe_input_stream_8_V_V_din;

assign pe_weight_stream_V_din = grp_pe_fu_48_pe_weight_stream_V_din;

endmodule //top
